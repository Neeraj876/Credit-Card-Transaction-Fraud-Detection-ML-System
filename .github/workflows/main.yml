name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

permissions:
  id-token: write
  contents: read

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Grant permissions to files and directories
        run: |
          sudo chown -R $USER:$USER .
          sudo chmod -R u+rwx .

      - name: Lint code
        run: echo "Linting repository"

      - name: Run unit tests
        run: echo "Running unit tests"

  build-and-push-ecr-images:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Grant permissions to files and directories
        run: |
          sudo chown -R $USER:$USER .
          sudo chmod -R u+rwx .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push FastAPI image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_FASTAPI }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile.fastapi .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Build, tag, and push Streamlit image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_STREAMLIT }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f streamlit/Dockerfile.streamlit .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Create deployment config
        run: |
          echo "Creating .env file..."
          echo "ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}" > env-file.txt
          echo "ECR_REPOSITORY_FASTAPI=${{ secrets.ECR_REPOSITORY_FASTAPI }}" >> env-file.txt
          echo "ECR_REPOSITORY_STREAMLIT=${{ secrets.ECR_REPOSITORY_STREAMLIT }}" >> env-file.txt
          echo "IMAGE_TAG=${{ github.sha }}" >> env-file.txt
          echo "MONGO_DB_URL=${{ secrets.MONGO_DB_URL }}" >> env-file.txt
          echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> env-file.txt
          echo "MLFLOW_TRACKING_URI=${{ secrets.MLFLOW_TRACKING_URI }}" >> env-file.txt
          echo "MLFLOW_S3_BUCKET_NAME=${{ secrets.MLFLOW_S3_BUCKET_NAME }}" >> env-file.txt
          echo "FEATURE_REPO_PATH=/app/my_feature_repo/feature_repo" >> env-file.txt
          
          echo "File created at:"
          pwd
          ls -la

      - name: Verify .env file before upload
        run: |
          echo "Checking .env file contents:"
          cat env-file.txt

      - name: Upload .env file
        uses: actions/upload-artifact@v4
        with:
          name: env-file
          path: env-file.txt

  continuous-deployment:
    name: Continuous Deployment
    needs: build-and-push-ecr-images
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download .env file
        uses: actions/download-artifact@v4
        with:
          name: env-file
          path: ./

      - name: Verify downloaded .env file
        run: |
          echo "Checking if .env file is downloaded:"
          ls -lah ./
          cat ./env-file.txt
          # Rename to .env if needed
          cp ./env-file.txt ./.env

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Deploy with Docker Compose
        run: |
          echo "Loading environment variables..."
          set -a
          source ./.env
          set +a

          echo "Pulling latest Docker images..."
          docker-compose -f docker-compose.yaml -f docker-compose.observability.yaml pull

          echo "Starting services with Docker Compose..."
          docker-compose -f docker-compose.yaml -f docker-compose.observability.yaml up -d --remove-orphans

          echo "Cleaning up unused resources..."
          docker image prune -f
