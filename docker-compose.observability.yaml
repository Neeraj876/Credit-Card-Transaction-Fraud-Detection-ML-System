services:
  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    # depends_on:
    #   - fastapi
    networks:
      - easymlops_network

  grafana:
    image: grafana/grafana:10.1.5 
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - easymlops_network

  ### OPENTELEMETRY COLLECTOR ###
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.98.0
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./observability/otel/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"  # OTLP gRPC
      - "4318:4318"  # OTLP HTTP
      - "9464:9464"  # Prometheus exporter
      - "8888:8888"  # Metrics
      - "13133:13133" # Health check
    networks:
      - easymlops_network
    

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.16
    container_name: logstash
    volumes:
      - ./observability/logstash/logstash-pipeline.conf:/usr/share/logstash/pipeline/logstash.conf
      -  ./observability/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - easymlops_network
    healthcheck:
      test: ["CMD", "logstash", "-t", "-f", "/usr/share/logstash/pipeline"]
      interval: 30s
      timeout: 10s
      retries: 5

  ### FILEBEAT ###
  filebeat:
    image: docker.elastic.co/beats/filebeat:7.17.16
    user: root
    privileged: true
    command: ["/bin/bash", "-c", "chmod go-w /usr/share/filebeat/filebeat.yml && exec filebeat -e"]
    volumes:
      - ./observability/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - logstash
    networks:
      - easymlops_network

  ### ELASTICSEARCH ###
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.16
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
      - cluster.routing.allocation.disk.watermark.flood_stage=95%
      - cluster.routing.allocation.disk.watermark.high=90%
      - cluster.routing.allocation.disk.watermark.low=85%
    volumes:
      - es_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - easymlops_network
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200 | grep -q 'You Know, for Search'"]
      interval: 10s
      timeout: 10s
      retries: 10
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_limit: 512m
    

  ### KIBANA ###
  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.16
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - easymlops_network

  ### SLACK ALERTING (ALERTMANAGER) ###
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: alertmanager
    volumes:
      - ./observability/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    ports:
      - "9093:9093"
    networks:
      - easymlops_network

volumes:
  grafana_data:
  es_data:

# networks:
#   monitoring:
#     name: monitoring
#   # This connects to the pre-existing network
networks:
  easymlops_network:
    external: true
# networks:
#   easymlops_network:
#     name: easymlops_network